name: Open Data Service (ODS)

on: push
jobs:

  # ----------------- STORAGE SERVICE --------------------

  storage-build:
    name: Storage Build & Consumer-side CDC-Test
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Build
        run: |
          docker-compose -f docker-compose.yml build storage
          docker-compose -f docker-compose.yml build storage-db-liquibase
          docker-compose -f docker-compose.yml build storage-mq

      # The CDC-Test builds a cut-down image that would override the previously built production image
      # Therefore it is executed after uploading the production image
      - name: Consumer-side CDC-Test
        run: |
          bash ./storage/storage-mq/cdct-consumer.sh

      - name: Upload contract files as artifact
        uses: actions/upload-artifact@v2
        with:
          name: contracts
          path: ./pacts/*.json
          if-no-files-found: error


  # ----------------- PIPELINE SERVICE --------------------

  pipeline-build:
    name: Pipeline Build
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Build
        run: |
          docker-compose -f docker-compose.yml build pipeline


  # ----------------- NOTIFICATION SERVICE --------------------

  notification-build:
    name: Notification Build & Consumer-side CDC-Test
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Build
        run: |
          docker-compose -f docker-compose.yml build notification

      # The CDC-Test builds a cut-down image that would override the previously built production image
      # Therefore it is executed after uploading the production image
      - name: Consumer-side CDC-Test
        run: |
          bash ./notification/cdct-consumer.sh

      - name: Upload contract files as artifact
        uses: actions/upload-artifact@v2
        with:
          name: contracts
          path: ./pacts/*.json
          if-no-files-found: error


  # ----------------- UI SERVICE --------------------

  ui-build:
    name: UI Build & Consumer-side CDC-Test
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Build
        run: |
          docker-compose -f docker-compose.yml build ui

      # The CDC-Test builds a cut-down image that would override the previously built production image
      # Therefore it is executed after uploading the production image
      - name: Consumer-side CDC-Test
        run: |
          bash ./ui/cdct-consumer.sh

      - name: Upload Contract files as artifact
        uses: actions/upload-artifact@v2
        with:
          name: contracts
          path: ./pacts/*.json
          if-no-files-found: error

  # ----------------- Pipeline Provider-side CDC-Test -----------------
  pipeline-provider:
    name: Pipeline Provider-side CDC-Test
    runs-on: ubuntu-18.04
    needs: [pipeline-build, ui-build, notification-build, storage-build]
    steps:
      - uses: actions/checkout@v2

      - name: Download contract files from artifact
        uses: actions/download-artifact@v2
        with:
          name: contracts
          path: ./pacts

      - name: Build and Run
        run: |
          bash ./pipeline/cdct-provider.sh


  # ----------------- Storage Provider-side CDC-Test -----------------
  storage-provider:
    name: Storage Provider-side CDC-Test
    runs-on: ubuntu-18.04
    needs: [storage-build, ui-build]
    steps:
      - uses: actions/checkout@v2

      - name: Download contract files from artifact
        uses: actions/download-artifact@v2
        with:
          name: contracts
          path: ./pacts

      - name: Build and Run
        run: |
          bash ./storage/storage-mq/cdct-provider.sh

  # ----------------- SYSTEMTEST --------------------
  systemtest:
    name: Systemtest
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '16'

      - name: Build images
        run: docker-compose -f docker-compose.yml build --parallel

      - name: Install dependencies
        working-directory: ./system-test
        run: npm ci
      - name: Run test
        working-directory: ./system-test
        run: npm run test
      - name: Upload logs
        if: success() || failure()
        uses: actions/upload-artifact@v2
        with:
          name: SystemTestLogs
          path: system-test/logs/*
